/*
https://www.codewars.com/kata/550f22f4d758534c1100025a/train/csharp

The directions given to the man are, for example, the following (depending on the language):


{ "NORTH", "SOUTH", "SOUTH", "EAST", "WEST", "NORTH", "WEST" };

You can immediately see that going "NORTH" and immediately "SOUTH" is not reasonable, better stay to the same place! So the task is to give to the man a simplified version of the plan. A better plan in this case is simply:

{ "WEST" } 

Other examples:
In ["NORTH", "SOUTH", "EAST", "WEST"], the direction "NORTH" + "SOUTH" is going north and coming back right away.

The path becomes ["EAST", "WEST"], now "EAST" and "WEST" annihilate each other, therefore, the final result is [] (nil in Clojure).

In ["NORTH", "EAST", "WEST", "SOUTH", "WEST", "WEST"], "NORTH" and "SOUTH" are not directly opposite but they become directly opposite after the reduction of "EAST" and "WEST" so the whole path is reducible to ["WEST", "WEST"].

Task
Write a function dirReduc which will take an array of strings and returns an array of strings with the needless directions removed (W<->E or S<->N side by side).

The Haskell version takes a list of directions with data Direction = North | East | West | South.
The Clojure version returns nil when the path is reduced to nothing.
The Rust version takes a slice of enum Direction {North, East, West, South}.
*/



using System;
using System.Collections.Generic;
using System.Linq;

public class DirReduction {
  
    public static string[] dirReduc(String[] arr) 
    {
      List<string> str = new List<string>();
      str.AddRange(arr);
      for (int i=0;i<str.Count-1;i++)
        {
        if(str[i].Length==str[i+1].Length && str[i]!=str[i+1])
         {
          str.RemoveRange(i,2);
          i=-1;
         }
        }
      return str.ToArray();
    }
}
