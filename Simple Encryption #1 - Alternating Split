/*
https://www.codewars.com/kata/57814d79a56c88e3e0000786

Implement a pseudo-encryption algorithm which given a string S and an integer N concatenates all the odd-indexed characters of S with all the even-indexed characters of S, this process should be repeated N times.

Examples:

encrypt("012345", 1)  =>  "135024"
encrypt("012345", 2)  =>  "135024"  ->  "304152"
encrypt("012345", 3)  =>  "135024"  ->  "304152"  ->  "012345"

encrypt("01234", 1)  =>  "13024"
encrypt("01234", 2)  =>  "13024"  ->  "32104"
encrypt("01234", 3)  =>  "13024"  ->  "32104"  ->  "20314"
Together with the encryption function, you should also implement a decryption function which reverses the process.

If the string S is an empty value or the integer N is not positive, return the first argument without changes.
*/



using System;
using System.Linq;
using System.Collections.Generic;

public class Kata
{
  public static string Encrypt(string text, int n)
  {
    if(text ==""||text==null) return text;
    int count = 0;
    while (count<n)
      {
      count++;
      text = string.Join("",text.ToCharArray().Select((ch,i)=>(ch,i)).Where(o=>o.Item2%2!=0).Select(o=>o.ch).ToArray())
             + string.Join("",text.ToCharArray().Select((ch,i)=>(ch,i)).Where(o=>o.Item2%2==0).Select(o=>o.ch).ToArray());
      Console.WriteLine(text);
      }
    return text;
  }
  
  public static string Decrypt(string encryptedText, int n)
  {
    if(encryptedText ==""||encryptedText==null) return encryptedText;
    int count =0;
    while (count<n)
    {
      count++;
      List<(char,int)> query =  encryptedText.ToCharArray().Select((ch,i)=>(ch,i*2+1)).Where(o=>o.Item2<encryptedText.Length).ToList();
      query.AddRange(encryptedText.ToCharArray().Select((ch,i)=>(ch,(i-encryptedText.Length/2)*2)).Where(o=>o.Item2>=0).ToList());
      query.Sort((x, y) => x.Item2.CompareTo(y.Item2));
      encryptedText = string.Join("",query.Select(o=>o.Item1).ToArray());
    }
    return encryptedText;
  }
}
